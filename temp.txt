import org.junit.Assert.assertFalse
import org.junit.Assert.assertTrue
import org.junit.Ignore
import org.junit.Test
import org.junit.runner.JUnitCore;
import org.junit.runner.Result;

class IsbnVerifier{
    fun isValid(id: String): Boolean {
        return id.toLowerCase()
          .filter {it != '-'}
          //until 10th digit (or x) accumulator value is negative if id is correct 
          //		(to test id is at least 10 symbols long)
          //	and less 1 (to test id is at least one-symbol-length)
          //when 10th digit is reached, accumulator becomes positive if id is correct
          //
          //if id is correct, fold return 0
          //at 10th symbol check whether id is correct
          //if id tamplate is correct, but verification is failed, return acc % 11 (which != 0)
          //if id contains > 10 symbols, return -1
          //if id has wrong symbols, return -1
          //if id has no symbols, return 1
          .foldIndexed(1) {index, acc, ch -> if (index>9) -1
              								  else if (acc<0) acc
              								  else if (index<9){
                                                    if (ch.isDigit())
                                              			acc+(10-index)*(ch.toInt() - '0'.toInt())
                                                    else -1;
                                              }else if (index==9){
                                                  if (ch.isDigit())
                                                        (acc+(10-index)*(ch.toInt() - '0'.toInt()) -1) % 11
                                                  else if (ch.isLetter() && ch=='x')
                                                  		(acc+10-1) % 11
                                                  else -1;
                                              }
                                              else -1} == 0
              								/*if (index>9) -1
                  							 else if (acc>0) acc
          									 else if (ch.isLetter()){
                                                 if (index==9 && ch=='x')
                                                 	-(acc-10) - 1
                                                 else 1
                                             }else if (ch.isDigit()){
                                                 if (index==9)
                                                 	-(acc-((10-index)*ch.toInt() - '0'.toInt())) - 1
                                                 else
          									 	 	acc-((10-index)*ch.toInt() - '0'.toInt())
                                             }else 1}*/
    }
}

fun main(vararg args:String){
    /*//val result=JUnitCore.runClasses(IsbnVerifierTest::class);
    val result=JUnitCore.runClasses(IsbnVerifierTest())
        
    result.getFailures().forEach({println(it)})
        
    println("Success: "+result.wasSuccessful())
    println("Run count: "+result.getRunCount())*/
    val verifier=IsbnVerifier()
    println(verifier.isValid("3-598-21508-8"))
    println(verifier.isValid("3-598-21508-9"))
    println(verifier.isValid("3-598-21507-X"))
}

class IsbnVerifierTest {
    private var isbnVerifier: IsbnVerifier = IsbnVerifier()

    
    @Test
    fun validIsbnNumber() {
        assertTrue(isbnVerifier.isValid("3-598-21508-8"))
    }

    @Ignore
    @Test
    fun invalidIsbnCheckDigit() {
        assertFalse(isbnVerifier.isValid("3-598-21508-9"))
    }

    @Ignore
    @Test
    fun validIsbnNumberWithCheckDigitOfTen() {
        assertTrue(isbnVerifier.isValid("3-598-21507-X"))
    }

    @Ignore
    @Test
    fun checkDigitIsACharacterOtherThanX() {
        assertFalse(isbnVerifier.isValid("3-598-21507-A"))
    }

    @Ignore
    @Test
    fun invalidCharacterInIsbn() {
        assertFalse(isbnVerifier.isValid("3-598-P1581-X"))
    }

    @Ignore
    @Test
    fun xIsOnlyValidAsACheckDigit() {
        assertFalse(isbnVerifier.isValid("3-598-2X507-9"))
    }

    @Ignore
    @Test
    fun validIsbnWithoutSeparatingDashes() {
        assertTrue(isbnVerifier.isValid("3598215088"))
    }

    @Ignore
    @Test
    fun isbnWithoutSeparatingDashesAndXAsCheckDigit() {
        assertTrue(isbnVerifier.isValid("359821507X"))
    }

    @Ignore
    @Test
    fun isbnWithoutCheckDigitAndDashes() {
        assertFalse(isbnVerifier.isValid("359821507"))
    }

    @Ignore
    @Test
    fun tooLongIsbnAndNoDashes() {
        assertFalse(isbnVerifier.isValid("3598215078X"))
    }

    @Ignore
    @Test
    fun isbnWithoutCheckDigit() {
        assertFalse(isbnVerifier.isValid("3-598-21507"))
    }

    @Ignore
    @Test
    fun tooLongIsbn() {
        assertFalse(isbnVerifier.isValid("3-598-21507-XX"))
    }

    @Ignore
    @Test
    fun checkDigitOfXShouldNotBeUsedForZero() {
        assertFalse(isbnVerifier.isValid("3-598-21515-X"))
    }

    @Ignore
    @Test
    fun emptyIsbn() {
        assertFalse(isbnVerifier.isValid(""))
    }

    @Ignore
    @Test
    fun inputIsNineCharacters() {
        assertFalse(isbnVerifier.isValid("134456729"))
    }

    @Ignore
    @Test
    fun invalidCharactersAreNotIgnored() {
        assertFalse(isbnVerifier.isValid("3132P34035"))
    }
}
